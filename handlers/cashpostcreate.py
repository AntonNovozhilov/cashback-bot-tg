import asyncio
import re
from collections import defaultdict

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from config import KANAL, ADMIN_IDS
from db.database import async_session
from db.models import ChatPrivatUser
from keyboards.inline_kb import finish_kb
from keyboards.kb_user import user_kb


cachbackpost = Router()

media_group_buffer = defaultdict(list)


def home():
    '''–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''
    return types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]], resize_keyboard=True, input_field_placeholder='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')

async def chat_privat(tg_id):
    '''–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.'''
    async with async_session() as session:
        result = await session.scalars(
            select(
                ChatPrivatUser.user_id).where(ChatPrivatUser.user_id == tg_id)
        )
        return result.all()

def escape_md(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f'\\{ch}')
    return text


def contains_emoji(text: str):
    '''–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Å–º–∞–π–ª–∏–∫–æ–≤.'''
    emoji_pattern = re.compile('[\U00010000-\U0010ffff]', flags=re.UNICODE)
    return bool(emoji_pattern.search(text))

class PostCachback(StatesGroup):
    '''–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–µ—à–±–µ–∫–µ.'''

    title = State()
    market = State()
    price_before = State()
    price_after = State()
    discount = State()
    seller = State()
    photo = State()


@cachbackpost.callback_query(F.data == 'create_cash')
async def start_post(callback: types.CallbackQuery, state: FSMContext):
    '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.'''
    await state.set_state(PostCachback.title)
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=home())

@cachbackpost.message(PostCachback.title)
async def post_market(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(title=message.text)
    await state.set_state(PostCachback.market)
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä?')

@cachbackpost.message(PostCachback.market)
async def post_price(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(market=message.text)
    await state.set_state(PostCachback.price_before)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –≤ —Ä—É–±–ª—è—Ö:')

@cachbackpost.message(PostCachback.price_before)
async def post_price_before(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1490):')
        return
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    
    await state.update_data(price_before=message.text)
    await state.set_state(PostCachback.price_after)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ —Å —É—á–µ—Ç–æ–º –∫–µ—à–±–µ–∫–∞:')

@cachbackpost.message(PostCachback.price_after)
async def post_price_after(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    data = await state.get_data()
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):')
        return
    new_price = int(message.text)
    old_price = int(data.get('price_before', 0))
    if new_price >= old_price:
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–µ—à–±–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ –∫–µ—à–±–µ–∫–∞.')
        return
    await state.update_data(price_after=message.text)
    await state.set_state(PostCachback.discount)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö')

@cachbackpost.message(PostCachback.discount)
async def post_cashback(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    if not message.text.isdigit():
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–µ—à–±—ç–∫ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300 –∏–ª–∏ 10):')
            return
    cashback_value = int(message.text)
    cashback_type = '‚ÇΩ' if cashback_value > 100 else '%'
    await state.update_data(discount=cashback_value, cashback_type=cashback_type)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:')
    await state.set_state(PostCachback.seller)

@cachbackpost.message(PostCachback.seller)
async def post_seller(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.'''
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(seller=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É:')
    await state.set_state(PostCachback.photo)

@cachbackpost.message(PostCachback.photo, ~F.photo)
async def wrong_input_in_photo(message: types.Message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.'''
    await message.answer('‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —Ç–æ–≤–∞—Ä–∞.\n'
                         '–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è üìé –∏ –≤—ã–±—Ä–∞–≤ *–§–æ—Ç–æ*.\n')


@cachbackpost.message(PostCachback.photo, F.photo)
async def post_photo(message: types.Message, state: FSMContext):
    '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.'''
    if message.media_group_id:
        media_group_buffer[message.media_group_id].append(message.photo[-1].file_id)
        if len(media_group_buffer[message.media_group_id]) == 1:
            await asyncio.sleep(1.5)
            photo_ids = media_group_buffer.pop(message.media_group_id)
            data = await state.get_data()
            photos = data.get('photos', [])
            photos.extend(photo_ids)
            await state.update_data(photos=photos)
            await message.answer(
                'üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                reply_markup=finish_kb()
            )
    else:
        data = await state.get_data()
        photos = data.get('photos', [])
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)

        await message.answer(
            'üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
            reply_markup=finish_kb()
        )

@cachbackpost.callback_query(F.data == 'finish_post')
async def confirm_post(callback: types.CallbackQuery, state: FSMContext):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞.'''
    await callback.answer()
    data = await state.get_data()
    photos = data.get('photos', [])
    if not photos:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.')
        return
    text = (
        f'<i><b>{data["title"]}</b></i> \n'
        f'<i>{data["market"]}</i> \n\n'
        f'<b>–¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:</b> {data["price_before"]}‚ÇΩ ‚ùå \n'
        f'<b>–¶–µ–Ω–∞ –¥–ª—è –í–∞—Å:</b> {data["price_after"]}‚ÇΩ ‚úÖ \n'
        f'<i>(–ö–µ—à–±–µ–∫ - {data["discount"]}{data["cashback_type"]}üî•)</i> \n\n'
        f'üñäÔ∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–∫—É–ø—É –ø–∏—à–∏</b> <i>{data["seller"]}</i>'
    )
    preview_buttons = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', callback_data='send_to_mod_cash')],
        [types.InlineKeyboardButton(text='üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='restart_post_cash')]
    ])
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.message.delete()
    await callback.bot.send_media_group(callback.from_user.id, media=media_group)
    await callback.bot.send_message(callback.from_user.id, text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç')
    await callback.bot.send_message(callback.from_user.id, text=text, reply_markup=preview_buttons, parse_mode='HTML')


@cachbackpost.callback_query(F.data == 'send_to_mod_cash')
async def handle_finish2(callback: types.CallbackQuery, state: FSMContext):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É.'''
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    photos = data.get('photos', [])
    if not photos:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.')
        return
    text = (
        f'<i><b>{data["title"]}</b></i> \n'
        f'<i>{data["market"]}</i> \n\n'
        f'<b>–¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:</b> {data["price_before"]}‚ÇΩ ‚ùå \n'
        f'<b>–¶–µ–Ω–∞ –¥–ª—è –í–∞—Å:</b> {data["price_after"]}‚ÇΩ ‚úÖ \n'
        f'<i>(–ö–µ—à–±–µ–∫ - {data["discount"]}{data["cashback_type"]}üî•)</i> \n\n'
        f'üñäÔ∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–∫—É–ø—É –ø–∏—à–∏</b> <i>{data["seller"]}</i>'
    )
    user_id = callback.from_user.id
    async with async_session() as session:
        chat_user = await session.execute(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
        chat_user = chat_user.scalar()
        thread_id = chat_user.thread_id
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.bot.send_media_group(chat_id=KANAL, media=media_group, message_thread_id=thread_id)
    buttons = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç', callback_data=f'approve_{user_id}')],
        [types.InlineKeyboardButton(text='‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω', callback_data=f'reject_{user_id}')]
    ])
    await callback.bot.send_message(chat_id=KANAL, text=text, message_thread_id=thread_id, reply_markup=buttons, parse_mode='HTML')
    await state.clear()
    await callback.message.answer('‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.', reply_markup=user_kb(callback.from_user.id))

@cachbackpost.callback_query(F.data == 'restart_post_cash')
async def restart_post(callback: types.CallbackQuery, state: FSMContext):
    '''–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.'''
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.')
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(PostCachback.title)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=home())

@cachbackpost.callback_query(F.data.startswith('approve_'))
async def approve_post(callback: types.CallbackQuery):
    '''–ü–æ–¥—Ç–≤–µ—Ä–¥–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'''
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split('_')[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text='‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å.')
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')

@cachbackpost.callback_query(F.data.startswith('reject_'))
async def reject_post(callback: types.CallbackQuery):
    '''–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'''
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split('_')[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text='‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')


@cachbackpost.message(F.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: types.Message, state: FSMContext):
    '''–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''
    await state.clear()
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=user_kb(message.from_user.id))