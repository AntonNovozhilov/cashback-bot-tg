from aiogram.types import Message, CallbackQuery, FSInputFile
from command_text import FAQ, TEXT_REQ
from keyboards.admin import is_admin, kb_admin
from aiogram import Router, F
import os
from dotenv import load_dotenv
from sqlalchemy import select
from db.models import User, ChatPrivatUser
from db.database import async_session
from datetime import datetime, timedelta, timezone
from aiogram.filters import Command
from config import CHANNEL_ID_OFFER, KANAL, PRICE_MESSAGE_ID_OFFER, config
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import confirm_keyboard  # admin_ids —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω–æ–≤
from config import (
    CHANNEL_ID_BARTER,
    CHANNEL_ID_CASH,
    CHANNEL_INFO_MESSAGE,
    CHAT_ID,
    PRICE_MESSAGE_ID_BARTER,
    PRICE_MESSAGE_ID_CASH,
    count_price_in_admin,
    count_users_in_admin,
    home,
    kb_admin_pannel_text,
    kb_admin_text,
    kb_cannals_text,
    kb_create_post_text,
    kb_faq_text,
    kb_price_text,
    kb_requis_text,
)
from keyboards.inline_kb import inline_create_post, inline_price
from keyboards.kb_user import user_kb
from keyboards.admin import kb_admin


load_dotenv('.env')

commands = Router()

@commands.message(F.text == '–ê–¥–º–∏–Ω–∫–∞')
async def panel_admin(message: Message):
    '''–í—ã–∑–æ–≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.'''
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
    
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=kb_admin(message.from_user.id)
    )

@commands.message(F.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''

    await state.clear()
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=user_kb(message.from_user.id))

@commands.message(F.text == kb_create_post_text)
async def inline_create_posts(message: Message):
    """–í—ã–∑–æ–≤ 2 –∏–Ω–ª–∞–π–Ω –∫–Ω–∏–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–µ–Ω—é –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—Ç."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—Ç", reply_markup=inline_create_post()
    )


@commands.message(F.text == kb_price_text)
async def price(message: Message):
    """–í—ã–∑–æ–≤ 2 –∏–Ω–ª–∞–π–Ω –∫–Ω–∏–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–µ–Ω—é –ü—Ä–∞–π—Å."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª üëá", reply_markup=inline_price())


@commands.message(F.text == kb_faq_text)
async def faq(message: Message):
    """–í—ã–∑–æ–≤ –ø–æ—Å—Ç–∞ —Å FAQ–æ–º."""
    photo_path = "images/faq.jpg"
    photo = FSInputFile(photo_path)
    await message.bot.send_photo(
        chat_id=message.chat.id, photo=photo, caption=FAQ, parse_mode="MarkdownV2"
    )

@commands.message(F.text == kb_cannals_text)
async def list_channals(message: Message):
    """–í—ã–∑–æ–≤ –ø–æ—Å—Ç–∞ —Å —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤."""
    await message.bot.forward_message(
        chat_id=message.chat.id,
        from_chat_id=CHANNEL_ID_BARTER,
        message_id=CHANNEL_INFO_MESSAGE,
    )

@commands.message(F.text == kb_requis_text)
async def reqwuis(message: Message):
    """–í—ã–∑–æ–≤ –ø–æ—Å—Ç–∞ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    await message.answer(text=TEXT_REQ)


@commands.message(F.text == kb_admin_text)
async def link_admin(message: Message):
    """–í—ã–∑–æ–≤ –ø–æ—Å—Ç–∞ —Å —Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∞."""
    await message.answer(
        text="[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Æ–ª–∏—è](https://t.me/@Juli_Novozhilova)",
        parse_mode="MarkdownV2",
    )

@commands.message(F.text == kb_admin_pannel_text)
async def panel_admin(message: Message):
    """–í—ã–∑–æ–≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=kb_admin(message.from_user.id)
    )


@commands.message(F.text == home)
async def panel_admin_out(message: Message):
    """–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=user_kb(message.from_user.id)
    )

@commands.callback_query(F.data == "price_cash")
async def price_cashback(callback: CallbackQuery):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1 –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–π—Å–æ–º –∫–µ—à–±–µ–∫–∞."""
    # await price_cashback_add(callback.from_user.id)
    await callback.message.bot.forward_message(
        chat_id=callback.message.chat.id,
        from_chat_id=CHANNEL_ID_CASH,
        message_id=PRICE_MESSAGE_ID_CASH,
    )
    user_id = callback.from_user.id
    async with async_session() as session:
        chat_user = await session.execute(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
        chat_user = chat_user.scalar()
    await callback.message.bot.send_message(
        chat_id=KANAL,
        message_thread_id=chat_user.thread_id,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å –ø–æ –∫–µ—à–±–µ–∫—É"
    )


@commands.callback_query(F.data == "price_barter")
async def price_barter(callback: CallbackQuery):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 2 –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–π—Å–æ–º –±–∞—Ä—Ç–µ—Ä–∞."""
    # await price_barter_add(callback.from_user.id)
    await callback.message.bot.forward_message(
        chat_id=callback.message.chat.id,
        from_chat_id=CHANNEL_ID_BARTER,
        message_id=PRICE_MESSAGE_ID_BARTER,
    )
    user_id = callback.from_user.id
    async with async_session() as session:
        chat_user = await session.execute(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
        chat_user = chat_user.scalar()
    await callback.message.bot.send_message(
        chat_id=KANAL,
        message_thread_id=chat_user.thread_id,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å –ø–æ –±–∞—Ä—Ç–µ—Ä—É"
    )

@commands.callback_query(F.data == "price_offer")
async def price_offer(callback: CallbackQuery):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'price_offer' –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ price.txt."""
    await callback.message.bot.forward_message(
        chat_id=callback.message.chat.id,
        from_chat_id=CHANNEL_ID_OFFER,
        message_id=PRICE_MESSAGE_ID_OFFER,
    )
    user_id = callback.from_user.id
    async with async_session() as session:
        chat_user = await session.execute(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
        chat_user = chat_user.scalar()
    await callback.message.bot.send_message(
        chat_id=KANAL,
        message_thread_id=chat_user.thread_id,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º"
    )

@commands.message(F.chat.id == KANAL, F.message_thread_id, Command("pc"))
async def from_admin_to_user_cashbak(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å –∫–µ—à–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–æ–π."""
    thread_id = message.message_thread_id
    async with async_session() as session:
        chat_user = await session.scalar(
            select(ChatPrivatUser).where(ChatPrivatUser.thread_id == thread_id)
        )
        if chat_user:
            await message.bot.forward_message(
                chat_id=chat_user.user_id,
                from_chat_id=CHANNEL_ID_CASH,
                message_id=PRICE_MESSAGE_ID_CASH,
            )
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º –ø–æ –∫–µ—à–±–µ–∫—É —É—à–ª–æ')


@commands.message(F.chat.id == KANAL, F.message_thread_id, Command("pb"))
async def from_admin_to_user_barter(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å –±–∞—Ä—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–æ–π."""
    thread_id = message.message_thread_id
    async with async_session() as session:
        chat_user = await session.scalar(
            select(ChatPrivatUser).where(ChatPrivatUser.thread_id == thread_id)
        )
        if chat_user:
            await message.bot.forward_message(
                chat_id=chat_user.user_id,
                from_chat_id=CHANNEL_ID_BARTER,
                message_id=PRICE_MESSAGE_ID_BARTER,
            )
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º –ø–æ –±–∞—Ä—Ç–µ—Ä—É —É—à–ª–æ')

@commands.message(F.chat.id == KANAL, F.message_thread_id, Command("po"))
async def from_admin_to_user_offer(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å –±–∞—Ä—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–æ–π."""
    thread_id = message.message_thread_id
    async with async_session() as session:
        chat_user = await session.scalar(
            select(ChatPrivatUser).where(ChatPrivatUser.thread_id == thread_id)
        )
        if chat_user:
            await message.bot.forward_message(
                chat_id=chat_user.user_id,
                from_chat_id=CHANNEL_ID_OFFER,
                message_id=PRICE_MESSAGE_ID_OFFER,
            )
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º —É—à–ª–æ')

@commands.message(F.chat.id == KANAL, F.message_thread_id, Command("r"))
async def from_admin_to_user_req(message: Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–æ–π."""
    thread_id = message.message_thread_id
    async with async_session() as session:
        chat_user = await session.scalar(
            select(ChatPrivatUser).where(ChatPrivatUser.thread_id == thread_id)
        )
        if chat_user:
                await message.bot.send_message(chat_id=chat_user.user_id, text=TEXT_REQ)
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ —É—à–ª–æ')


@commands.message(F.text == '–í—ã–π—Ç–∏')
async def panel_admin_out(message: Message):
    """–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=user_kb(message.from_user.id)
    )

async def count_users():
    '''–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'''
    async with async_session() as session:
        return await session.scalars(select(User))
    
async def count_users_today():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (UTC)."""
    now = datetime.now()
    start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0).replace(tzinfo=None)
    end_of_day = now.replace(hour=23, minute=59, second=59, microsecond=999999).replace(tzinfo=None)

    async with async_session() as session:
        return await session.scalars(
            select(User).where(
                User.date_create >= start_of_day,
                User.date_create <= end_of_day
            )
        )


async def count_users_week():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (UTC)."""
    now = datetime.now()
    week_ago = now - timedelta(days=7)

    async with async_session() as session:
        return await session.scalars(
            select(User).where(User.date_create >= week_ago)
        )

    
@commands.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def count_us(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    users = await count_users()
    today_users = await count_users_today()
    week_users = await count_users_week()

    count_all = len(list(users))
    count_today = len(list(today_users))
    count_week = len(list(week_users))

    await message.answer(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        f"üë• –í—Å–µ–≥–æ: {count_all}\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {count_today}\n"
        f"üìà –ó–∞ 7 –¥–Ω–µ–π: {count_week}",
        parse_mode="Markdown"
    )

class Edit(StatesGroup):
    waiting_price = State()
    confirm_price = State()



@commands.message(Command("editprice"))
async def edit_price_command(message: Message, state: FSMContext):
    if message.from_user.id not in config.admin_ids:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è /price:")
    await state.set_state(Edit.waiting_price)


@commands.message(Edit.waiting_price)
async def preview_price_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    await state.update_data(price_text=new_text)

    await message.answer(
        f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n\n{new_text}",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(Edit.confirm_price)


@commands.callback_query(F.data == "confirm_ok", Edit.confirm_price)
async def confirm_price(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    new_text = data.get("price_text", "")

    with open("price.txt", "w", encoding="utf-8") as f:
        f.write(new_text)

    await callback.message.edit_text("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()
    await callback.answer()


@commands.callback_query(F.data == "confirm_restart", Edit.confirm_price)
async def cancel_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()