import asyncio
from collections import defaultdict

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from config import ADMIN_IDS, KANAL
from core.database import async_session
from fsm.states import PostBarter
from handlers.cashpostcreate import contains_emoji
from keyboards.inline_kb import finish_kb2
from keyboards.kb_user import user_kb
from models.models import ChatPrivatUser

barterpost = Router()

media_group_bufferbarter = defaultdict(list)


async def chat_privat(tg_id):
    """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤."""
    async with async_session() as session:
        result = await session.scalars(
            select(ChatPrivatUser.user_id).where(
                ChatPrivatUser.user_id == tg_id
            )
        )
        return result.all()


def escape_md(text: str) -> str:
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text


def barter_money_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ 2–æ–º —à–∞–≥–µ."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–° –¥–æ–ø–ª–∞—Ç–æ–π", callback_data="money_yes"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ë–µ–∑ –¥–æ–ø–ª–∞—Ç—ã", callback_data="money_no"
                )
            ],
        ]
    )


def home():
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True,
        input_field_placeholder="–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    )


@barterpost.callback_query(F.data == "create_barter")
async def start_post(callback: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await state.set_state(PostBarter.title)
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=home()
    )


@barterpost.message(F.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=user_kb(message.from_user.id),
    )


@barterpost.message(PostBarter.title)
async def start_post2(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await state.update_data(title=message.text)
    if contains_emoji(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç."
        )
        return
    await state.set_state(PostBarter.money)
    await message.answer(
        "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –±–∞—Ä—Ç–µ—Ä —Å –¥–æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑?",
        reply_markup=barter_money_kb(),
    )


@barterpost.callback_query(F.data.startswith("money_"))
async def set_money(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–ª–∞—Ç—ã, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–∞–Ω–∏—è."""
    money_value = (
        "–° –î–û–ü–õ–ê–¢–û–ô" if callback.data == "money_yes" else "–ë–ï–ó –î–û–ü–õ–ê–¢–´"
    )
    await state.update_data(money=money_value)
    await callback.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –±–ª–æ–≥–µ—Ä–∞ (–ù–∞–ø—Ä–º–µ—Ä, —Å–æ—Ü—Å–µ—Ç—å, –∫–æ–ª-–≤–æ –æ—Ö–≤–∞—Ç–æ–≤, —Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç.–¥.):",
        reply_markup=home(),
    )
    await state.set_state(PostBarter.web)


@barterpost.message(PostBarter.money)
async def block_text_input_on_money(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ ‚òùÔ∏è")


@barterpost.message(PostBarter.web)
async def criteria(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–∞–Ω–∏—è."""
    await state.update_data(web=message.text)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ (–ù–∞–ø—Ä–∏–º–µ—Ä, –°–Ω—è—Ç—å —Ä–∏–ª—Å, –≤—ã–ª–æ–∂–∏—Ç—å —Å—Ç–æ—Ä–∏–∑, –≤—ã–∫—É–ø–∏—Ç—å –ø–æ –¢–ó –∏ —Ç.–¥.):",
        reply_markup=home(),
    )
    await state.set_state(PostBarter.descriptions)


@barterpost.message(PostBarter.descriptions)
async def set_description(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–∞–Ω–∏—è."""
    await state.update_data(descriptions=message.text)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=home())
    await state.set_state(PostBarter.seller)


@barterpost.message(PostBarter.seller)
async def set_seller(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–∞–Ω–∏—è."""
    await state.update_data(seller=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É:", reply_markup=home()
    )
    await state.set_state(PostBarter.photo)


@barterpost.message(PostBarter.photo, ~F.photo)
async def wrong_input_in_photobarter(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    await message.answer(
        "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —Ç–æ–≤–∞—Ä–∞.\n"
        "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è üìé –∏ –≤—ã–±—Ä–∞–≤ *–§–æ—Ç–æ*.\n"
    )


@barterpost.message(PostBarter.photo, F.photo)
async def post_photo(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if message.media_group_id:
        media_group_bufferbarter[message.media_group_id].append(
            message.photo[-1].file_id
        )
        if len(media_group_bufferbarter[message.media_group_id]) == 1:
            await asyncio.sleep(1.5)
            photo_ids = media_group_bufferbarter.pop(message.media_group_id)
            data = await state.get_data()
            photos = data.get("photos", [])
            photos.extend(photo_ids)
            await state.update_data(photos=photos)
            await message.answer(
                "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=finish_kb2(),
            )
    else:
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
        await message.answer(
            "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=finish_kb2(),
        )


@barterpost.callback_query(F.data == "confirm_post2")
async def confirm_post(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞."""
    await callback.answer()
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return
    text = (
        f'***_{escape_md(data["title"])}_*** \n\n'
        f'–ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –ø–æ –±–∞—Ä—Ç–µ—Ä—É {escape_md(data["money"])}\\, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–π –±–ª–æ–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\\! \n\n'
        f"‚ùóÔ∏è***–í–ê–ñ–ù–û\\:***\n\n"
        f"***_‚ñ´Ô∏è –°–æ—Ü\\. —Å–µ—Ç—å\\. –û—Ö–≤–∞—Ç –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è\\:_***\n"
        f'\\-{escape_md(data["web"])}\n\n'
        f"***_‚ñ´Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å\\?_***\n"
        f'\\-{escape_md(data["descriptions"])}\n\n\n'
        f'üñäÔ∏è ***–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–∫–ª–∏–∫*** _{escape_md(data["seller"])}_'
    )
    preview_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                    callback_data="send_to_mod",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_post"
                )
            ],
        ]
    )
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.message.delete()
    await callback.bot.send_media_group(
        callback.from_user.id, media=media_group
    )
    await callback.bot.send_message(
        callback.from_user.id, text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç"
    )
    await callback.bot.send_message(
        callback.from_user.id,
        text=text,
        reply_markup=preview_buttons,
        parse_mode="MarkdownV2",
    )


@barterpost.callback_query(F.data == "send_to_mod")
async def handle_finish2(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return
    text = (
        f'***_{escape_md(data["title"])}_*** \n\n'
        f'–ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –ø–æ –±–∞—Ä—Ç–µ—Ä—É {escape_md(data["money"])}\\, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–π –±–ª–æ–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\\! \n\n'
        f"‚ùóÔ∏è***–í–ê–ñ–ù–û\\:***\n\n"
        f"***_‚ñ´Ô∏è –°–æ—Ü\\. —Å–µ—Ç—å\\. –û—Ö–≤–∞—Ç –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è\\:_***\n"
        f'\\-{escape_md(data["web"])}\n\n'
        f"***_‚ñ´Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å\\?_***\n"
        f'\\-{escape_md(data["descriptions"])}\n\n\n'
        f'üñäÔ∏è ***–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–∫–ª–∏–∫*** _{escape_md(data["seller"])}_'
    )
    user_id = callback.from_user.id
    async with async_session() as session:
        chat_user = await session.execute(
            select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id)
        )
        chat_user = chat_user.scalar()
        thread_id = chat_user.thread_id
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.bot.send_media_group(
        chat_id=KANAL, media=media_group, message_thread_id=thread_id
    )
    buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç", callback_data=f"approve_{user_id}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω", callback_data=f"reject_{user_id}"
                )
            ],
        ]
    )
    await callback.bot.send_message(
        chat_id=KANAL,
        text=text,
        message_thread_id=thread_id,
        reply_markup=buttons,
        parse_mode="MarkdownV2",
    )
    await state.clear()
    await callback.message.answer(
        "‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
        reply_markup=user_kb(callback.from_user.id),
    )


@barterpost.callback_query(F.data == "restart_post")
async def restart_post(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ."""
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(PostBarter.title)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=home()
    )


@barterpost.callback_query(F.data.startswith("approve_"))
async def approve_post2(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å.",
        )
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@barterpost.callback_query(F.data.startswith("reject_"))
async def reject_post2(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        )
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."
        )
    except Exception as e:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
